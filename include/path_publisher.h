/**
 * @file path_publisher.h
 * @author Jialiang Han (hanjiali@umich.edu)
 * @brief main function is to publish path found by algorithm
 * @version 0.1
 * @date 2021-12-27
 * 
 * @copyright Copyright (c) 2021
 * 
 */

#pragma once

#include <cstring>
#include <vector>

#include <ros/ros.h>
#include <tf/transform_datatypes.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseArray.h>
#include <visualization_msgs/MarkerArray.h>
#include "parameter_manager.h"
#include <Eigen/Dense>
#include "utility.h"
#include "genetic_algorithm_using_bezier/FitnessMsgVec.h"
namespace GeneticAlgorithm
{
    /*!
   \brief A class for tracing and visualizing the path generated by the Planner
*/
    class PathPublisher
    {
    public:
        // / The default constructor initializing the path object and setting publishers for the same.
        PathPublisher(const ParameterPathPublisher &params)
        {
            params_ = params;
            std::string path_topic = "/path";
            std::string path_point_topic = "/points";
            // _________________
            // TOPICS TO PUBLISH
                   pub_path_ = nh_.advertise<nav_msgs::Path>(path_topic, 1);
                   pub_path_point_ = nh_.advertise<visualization_msgs::MarkerArray>(path_point_topic, 1);
                   pub_fitness_ = nh_.advertise<genetic_algorithm_using_bezier::FitnessMsgVec>("/fitness", 1);
                   // CONFIGURE THE CONTAINER
                   path_.header.frame_id = "path";
        }

        /*!
     \brief Given a node pointer the path to the root node will be traced recursively
     \param node a 3D node, usually the goal node
     \param i a parameter for counting the number of nodes
  */
        void UpdatePath(const std::vector<Eigen::Vector3d> &nodePath);

        void UpdatePoint(const std::vector<Eigen::Vector3d> &point_vec);

        void UpdateFitness(const std::vector<double> &fitness_vec);
        /*!
     \brief Adds a segment to the path
     \param node a 3D node
  */
        void AddSegment(const Eigen::Vector3d &node);

        void AddPoint(const Eigen::Vector3d &node, const int &i);
        // ______________
        // PUBLISH METHODS

        /// Clears the path
        void Clear();
        /// Publishes the path
        void PublishPath() { pub_path_.publish(path_); };
        /// Publishes the nodes of the path

        void PublishPathPoints() { pub_path_point_.publish(path_points_); };

        void PublishFitness() { pub_fitness_.publish(fitness_msg_); };

    private:
        /// A handle to the ROS node
        ros::NodeHandle nh_;
        /// Publisher for the path as a spline
        ros::Publisher pub_path_;

        // publisher for all points from bezier
        ros::Publisher pub_path_point_;

        ros::Publisher pub_fitness_;

        /// Path data structure for visualization
        nav_msgs::Path path_;

        ParameterPathPublisher params_;
        visualization_msgs::MarkerArray path_points_;

        genetic_algorithm_using_bezier::FitnessMsgVec fitness_msg_;
    };
}
